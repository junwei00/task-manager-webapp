{"ast":null,"code":"var _jsxFileName = \"/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Tasks.js\";\nimport Task from './Task';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(_ref) {\n  let {\n    filteredTaskList,\n    tagList,\n    getUserTags,\n    refreshTask,\n    refreshDeletedTask\n  } = _ref;\n\n  function reorder(xs) {\n    return filteredTaskList.filter(task => {\n      task.status !== 'done';\n    }).concat(filteredTaskList.filter(task => {\n      task.status === 'done';\n    }));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tasks\",\n    children: [filteredTaskList.map((task, index) => {\n      if (task.status !== \"done\") {\n        return /*#__PURE__*/_jsxDEV(Task, {\n          index: index,\n          task: task,\n          tagList: tagList,\n          getUserTags: getUserTags,\n          refreshTaskNew: refreshTask,\n          refreshDeletedTaskNew: refreshDeletedTask\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this);\n      }\n    }), filteredTaskList.map((task, index) => {\n      if (task.status === \"done\") {\n        return /*#__PURE__*/_jsxDEV(Task, {\n          index: index,\n          task: task,\n          tagList: tagList,\n          getUserTags: getUserTags,\n          refreshTaskNew: refreshTask,\n          refreshDeletedTaskNew: refreshDeletedTask\n        }, task.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 13\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Tasks.js"],"names":["Task","useState","Tasks","filteredTaskList","tagList","getUserTags","refreshTask","refreshDeletedTask","reorder","xs","filter","task","status","concat","map","index","id"],"mappings":";AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;;;AAEA,SAASC,KAAT,OAA4F;AAAA,MAA7E;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA,WAA7B;AAA0CC,IAAAA,WAA1C;AAAuDC,IAAAA;AAAvD,GAA6E;;AAC1F,WAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACnB,WACEN,gBAAgB,CACbO,MADH,CACWC,IAAD,IAAU;AAACA,MAAAA,IAAI,CAACC,MAAL,KAAgB,MAAhB;AAAuB,KAD5C,EAEGC,MAFH,CAEUV,gBAAgB,CAACO,MAAjB,CAAyBC,IAAD,IAAU;AAACA,MAAAA,IAAI,CAACC,MAAL,KAAgB,MAAhB;AAAuB,KAA1D,CAFV,CADF;AAKD;;AAED,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACGT,gBAAgB,CAACW,GAAjB,CAAqB,CAACH,IAAD,EAAOI,KAAP,KAAiB;AACrC,UAAIJ,IAAI,CAACC,MAAL,KAAgB,MAApB,EAA4B;AAC1B,4BACE,QAAC,IAAD;AAEE,UAAA,KAAK,EAAEG,KAFT;AAGE,UAAA,IAAI,EAAEJ,IAHR;AAIE,UAAA,OAAO,EAAEP,OAJX;AAKE,UAAA,WAAW,EAAEC,WALf;AAME,UAAA,cAAc,EAAEC,WANlB;AAOE,UAAA,qBAAqB,EAAEC;AAPzB,WACOI,IAAI,CAACK,EADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AASD;AACF,KAZA,CADH,EAcGb,gBAAgB,CAACW,GAAjB,CAAqB,CAACH,IAAD,EAAOI,KAAP,KAAiB;AACrC,UAAIJ,IAAI,CAACC,MAAL,KAAgB,MAApB,EAA4B;AAC1B,4BACE,QAAC,IAAD;AAEE,UAAA,KAAK,EAAEG,KAFT;AAGE,UAAA,IAAI,EAAEJ,IAHR;AAIE,UAAA,OAAO,EAAEP,OAJX;AAKE,UAAA,WAAW,EAAEC,WALf;AAME,UAAA,cAAc,EAAEC,WANlB;AAOE,UAAA,qBAAqB,EAAEC;AAPzB,WACOI,IAAI,CAACK,EADZ;AAAA;AAAA;AAAA;AAAA,gBADF;AASD;AACJ,KAZE,CAdH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA8BD;;KAvCQd,K;AAyCT,eAAeA,KAAf","sourcesContent":["import Task from './Task'\nimport { useState } from 'react'\n\nfunction Tasks({ filteredTaskList, tagList, getUserTags, refreshTask, refreshDeletedTask }) {\n  function reorder(xs) {\n    return (\n      filteredTaskList\n        .filter((task) => {task.status !== 'done'})\n        .concat(filteredTaskList.filter((task) => {task.status === 'done'}))\n    )\n  }\n\n  return (\n    <div className=\"Tasks\">\n      {filteredTaskList.map((task, index) => {\n        if (task.status !== \"done\") {\n          return (\n            <Task \n              key={task.id} \n              index={index} \n              task={task} \n              tagList={tagList} \n              getUserTags={getUserTags}  \n              refreshTaskNew={refreshTask}\n              refreshDeletedTaskNew={refreshDeletedTask} />)\n        }\n      })}\n      {filteredTaskList.map((task, index) => {\n        if (task.status === \"done\") {\n          return (\n            <Task \n              key={task.id} \n              index={index} \n              task={task} \n              tagList={tagList} \n              getUserTags={getUserTags}  \n              refreshTaskNew={refreshTask}\n              refreshDeletedTaskNew={refreshDeletedTask} />)\n        }\n    })}\n    </div>\n  );\n}\n\nexport default Tasks"]},"metadata":{},"sourceType":"module"}