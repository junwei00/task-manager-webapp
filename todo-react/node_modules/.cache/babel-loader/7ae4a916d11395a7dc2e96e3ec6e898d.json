{"ast":null,"code":"import axios from\"axios\";import{jsx as _jsx}from\"react/jsx-runtime\";function TagTask(_ref){var task=_ref.task,tagList=_ref.tagList,refreshTask=_ref.refreshTask;function addTaskToTag(tag){axios.put(\"/api/tags/\".concat(tag.id),{do:\"add\",task:task.id}).then(function(res){refreshTask();}).catch(function(error){return console.log(error);});}var alreadyTagged=task.tags.map(function(tag){return tag.id;});return/*#__PURE__*/_jsx(\"div\",{className:\"TaskTagList\",children:tagList.map(function(tag,index){if(!alreadyTagged.includes(tag.id))return/*#__PURE__*/_jsx(\"h3\",{onClick:function onClick(){addTaskToTag(tag);},children:tag.name},index);})});}export default TagTask;","map":{"version":3,"sources":["/home/oaeiu/cvwo-todo-app/todo-react/src/components/TagTask.js"],"names":["axios","TagTask","task","tagList","refreshTask","addTaskToTag","tag","put","id","do","then","res","catch","error","console","log","alreadyTagged","tags","map","index","includes","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,C,2CAEA,QAASC,CAAAA,OAAT,MAAiD,IAA9BC,CAAAA,IAA8B,MAA9BA,IAA8B,CAAxBC,OAAwB,MAAxBA,OAAwB,CAAfC,WAAe,MAAfA,WAAe,CAC/C,QAASC,CAAAA,YAAT,CAAsBC,GAAtB,CAA2B,CACzBN,KAAK,CACFO,GADH,qBACoBD,GAAG,CAACE,EADxB,EAC8B,CAC1BC,EAAE,CAAE,KADsB,CAE1BP,IAAI,CAAEA,IAAI,CAACM,EAFe,CAD9B,EAKGE,IALH,CAKQ,SAACC,GAAD,CAAS,CACbP,WAAW,GACZ,CAPH,EAQGQ,KARH,CAQS,SAACC,KAAD,QAAWC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAX,EART,EASD,CAED,GAAIG,CAAAA,aAAa,CAAGd,IAAI,CAACe,IAAL,CAAUC,GAAV,CAAc,SAACZ,GAAD,CAAS,CAAC,MAAOA,CAAAA,GAAG,CAACE,EAAX,CAAc,CAAtC,CAApB,CAEA,mBAAQ,YAAK,SAAS,CAAC,aAAf,UACLL,OAAO,CAACe,GAAR,CAAY,SAACZ,GAAD,CAAMa,KAAN,CAAgB,CAC3B,GAAI,CAACH,aAAa,CAACI,QAAd,CAAuBd,GAAG,CAACE,EAA3B,CAAL,CACA,mBACE,WAAgB,OAAO,CAAE,kBAAI,CAACH,YAAY,CAACC,GAAD,CAAZ,CAAkB,CAAhD,UACGA,GAAG,CAACe,IADP,EAASF,KAAT,CADF,CAID,CANA,CADK,EAAR,CASD,CAED,cAAelB,CAAAA,OAAf","sourcesContent":["import axios from \"axios\";\n\nfunction TagTask({ task, tagList, refreshTask }) {\n  function addTaskToTag(tag) {\n    axios\n      .put(`/api/tags/${tag.id}`, {\n        do: \"add\",\n        task: task.id\n      })\n      .then((res) => {\n        refreshTask()\n      })\n      .catch((error) => console.log(error))\n  }\n\n  let alreadyTagged = task.tags.map((tag) => {return tag.id})\n\n  return (<div className=\"TaskTagList\">\n    {tagList.map((tag, index) => {\n      if (!alreadyTagged.includes(tag.id))\n      return (\n        <h3 key={index} onClick={()=>{addTaskToTag(tag)}}>\n          {tag.name}\n        </h3>)\n    })}\n  </div>)\n}\n\nexport default TagTask"]},"metadata":{},"sourceType":"module"}