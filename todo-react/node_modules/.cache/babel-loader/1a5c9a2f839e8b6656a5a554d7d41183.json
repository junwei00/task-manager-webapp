{"ast":null,"code":"var _jsxFileName = \"/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport TagTask from \"./TagTask\";\nimport Tag from \"./Tag\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Task(_ref) {\n  _s();\n\n  let {\n    currentUserId,\n    index,\n    task,\n    setFilteredTaskList,\n    filteredTaskList,\n    setTaggedTaskList,\n    setTaskList,\n    tagList,\n    getUserTags,\n    refreshTaskNew\n  } = _ref;\n  const [showEditTask, setShowEditTask] = useState(false);\n  const [showTagTask, setShowTagTask] = useState(false);\n\n  function refreshTasklist() {\n    axios.get(`/api/${currentUserId}/tasks`).then(res => {\n      setTaskList(res.data);\n    }).catch(error => console.log(error));\n  }\n\n  function refreshDeletedTask() {\n    let newTaskList = [...filteredTaskList];\n    newTaskList.splice(index, 1);\n    setFilteredTaskList(newTaskList);\n    setTaggedTaskList(newTaskList);\n    refreshTasklist();\n    getUserTags();\n  }\n\n  function refreshDeletedTaskTag(tagindex) {\n    let newTaskList = [...filteredTaskList];\n    newTaskList[index].tags.splice(tagindex, 1);\n    setFilteredTaskList(newTaskList);\n    setTaggedTaskList(newTaskList);\n    refreshTasklist();\n    getUserTags();\n  }\n\n  function deleteTask() {\n    axios.delete(`/api/tasks/${task.id}`).then(res => {\n      refreshDeletedTask();\n    }).catch(error => console.log(error));\n  }\n\n  function toggleFlagTask() {\n    let newstatus = task.status == \"flagged\" ? null : 'flagged';\n    axios.put(`/api/tasks/${task.id}`, {\n      status: newstatus\n    }).then(res => {\n      refreshTaskNew(res.data);\n    }).catch(error => console.log(error));\n  }\n\n  function toggleDoneTask() {\n    let newstatus = task.status == \"done\" ? null : 'done';\n    axios.put(`/api/tasks/${task.id}`, {\n      status: newstatus\n    }).then(res => {\n      refreshTaskNew(res.data);\n    }).catch(error => console.log(error));\n  }\n\n  let className = \"Task\";\n\n  if (task.status == \"flagged\") {\n    className += \" Task-flagged\";\n  }\n\n  if (task.status == \"done\") {\n    className += \" Task-done\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"Title\",\n        children: [task.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"TagsBar\",\n        children: task.tags.map((tag, index) => {\n          return /*#__PURE__*/_jsxDEV(Tag, {\n            tag: tag,\n            task: task,\n            getUserTags: getUserTags,\n            refreshTaskNew: refreshTaskNew\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"AddTagToTask\",\n        onClick: () => setShowTagTask(!showTagTask),\n        children: showTagTask ? \"-\" : \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 10\n      }, this), showTagTask && /*#__PURE__*/_jsxDEV(TagTask, {\n        task: task,\n        tagList: tagList,\n        getUserTags: getUserTags,\n        refreshTaskNew: refreshTaskNew\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      className: \"Deadline\",\n      children: [\"Deadline: \", task.deadline === null ? \"None\" : task.deadline]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Buttons\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleDoneTask,\n        children: task.status == 'done' ? 'Undo' : 'Done'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleFlagTask,\n        children: task.status == 'flagged' ? 'Unflag' : 'Flag'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowEditTask(!showEditTask),\n        children: showEditTask ? 'Close' : 'Edit'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: deleteTask,\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), showEditTask && /*#__PURE__*/_jsxDEV(EditTask, {\n      task: task,\n      index: index,\n      setShowEditTask: setShowEditTask,\n      refreshTaskNew: refreshTaskNew,\n      getUserTags: getUserTags\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Task, \"E6O+kNljy8TJBkmOI/QdaoyKiZw=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Task.js"],"names":["axios","useState","EditTask","TagTask","Tag","Task","currentUserId","index","task","setFilteredTaskList","filteredTaskList","setTaggedTaskList","setTaskList","tagList","getUserTags","refreshTaskNew","showEditTask","setShowEditTask","showTagTask","setShowTagTask","refreshTasklist","get","then","res","data","catch","error","console","log","refreshDeletedTask","newTaskList","splice","refreshDeletedTaskTag","tagindex","tags","deleteTask","delete","id","toggleFlagTask","newstatus","status","put","toggleDoneTask","className","title","map","tag","deadline","description"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport TagTask from \"./TagTask\";\nimport Tag from \"./Tag\"\n\nfunction Task({ \n  currentUserId, index, task,  setFilteredTaskList, filteredTaskList, setTaggedTaskList, \n  setTaskList, tagList, getUserTags, refreshTaskNew}) {\n  const [showEditTask, setShowEditTask] = useState(false)\n  const [showTagTask, setShowTagTask] = useState(false)\n\n  function refreshTasklist() {\n    axios\n      .get(`/api/${currentUserId}/tasks`)\n      .then((res) => {\n        setTaskList(res.data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function refreshDeletedTask() {\n    let newTaskList = [...filteredTaskList]\n    newTaskList.splice(index, 1)\n    setFilteredTaskList(newTaskList)\n    setTaggedTaskList(newTaskList)\n    refreshTasklist()\n    getUserTags()\n  }\n\n  function refreshDeletedTaskTag(tagindex) {\n    let newTaskList = [...filteredTaskList]\n    newTaskList[index].tags.splice(tagindex, 1)\n    setFilteredTaskList(newTaskList)\n    setTaggedTaskList(newTaskList)\n    refreshTasklist()\n    getUserTags()\n  }\n\n  function deleteTask() {\n    axios\n      .delete(`/api/tasks/${task.id}`)\n      .then((res) => {\n        refreshDeletedTask()\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function toggleFlagTask() {\n    let newstatus = (task.status == \"flagged\")\n               ? null\n               : 'flagged'\n    axios\n      .put(`/api/tasks/${task.id}`, {status: newstatus})\n      .then((res) => {\n        refreshTaskNew(res.data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function toggleDoneTask() {\n    let newstatus = (task.status == \"done\")\n               ? null\n               : 'done'\n    axios\n      .put(`/api/tasks/${task.id}`, {status: newstatus})\n      .then((res) => {\n        refreshTaskNew(res.data)\n      })\n      .catch((error) => console.log(error))    \n  }\n\n  let className=\"Task\"\n  if (task.status == \"flagged\") {\n    className += \" Task-flagged\"\n  }\n  if (task.status == \"done\") {\n    className += \" Task-done\"\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"Header\">\n         <h3 className=\"Title\">{task.title} </h3>\n         <div className=\"TagsBar\">\n            {task.tags.map((tag, index) => {\n             return (\n              <Tag \n                key={index} \n                tag={tag} \n                task={task}\n                getUserTags={getUserTags}\n                refreshTaskNew={refreshTaskNew}/>)\n          })} \n         </div>\n         <h3 className=\"AddTagToTask\" onClick={() => setShowTagTask(!showTagTask)}>{showTagTask ? \"-\" : \"+\"}</h3>\n         {showTagTask && \n          <TagTask \n            task={task} \n            tagList={tagList} \n            getUserTags={getUserTags}\n            refreshTaskNew={refreshTaskNew} />}\n      </div>\n      <h4 className=\"Deadline\">Deadline: {task.deadline === null ? \"None\" : task.deadline}</h4>\n      <p>{task.description}</p>\n      <div className=\"Buttons\">\n        <button onClick = {toggleDoneTask}>\n          {task.status == 'done' ? 'Undo' : 'Done'}\n        </button>\n        <button onClick = {toggleFlagTask}>\n          {task.status == 'flagged' ? 'Unflag' : 'Flag'}\n        </button>\n        <button onClick = {() => setShowEditTask(!showEditTask)}>\n        {showEditTask ? 'Close' : 'Edit'}\n        </button>\n        <button onClick = {deleteTask}>\n        Delete\n        </button>\n      </div>\n      {showEditTask && \n        <EditTask \n          task={task} \n          index={index} \n          setShowEditTask={setShowEditTask} \n          refreshTaskNew={refreshTaskNew}\n          getUserTags={getUserTags} />}\n    </div>\n  );\n}\n\nexport default Task"]},"metadata":{},"sourceType":"module"}