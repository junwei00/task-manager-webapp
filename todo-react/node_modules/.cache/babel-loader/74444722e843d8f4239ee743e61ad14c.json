{"ast":null,"code":"var _jsxFileName = \"/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Tasks.js\",\n    _s = $RefreshSig$();\n\nimport Task from './Task';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Tasks(_ref) {\n  _s();\n\n  let {\n    filteredTaskList,\n    tagList,\n    getUserTags,\n    refreshTask,\n    refreshDeletedTask\n  } = _ref;\n  const [showDoneTasks, setShowDoneTasks] = useState(false);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Tasks\",\n    children: [filteredTaskList.filter(task => {\n      return task.status !== \"done\";\n    }).map(task => {\n      return /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        tagList: tagList,\n        getUserTags: getUserTags,\n        refreshTaskNew: refreshTask,\n        refreshDeletedTaskNew: refreshDeletedTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowDoneTasks(!showDoneTasks),\n      children: showDoneTasks ? \"Hide done tasks ▲\" : \"Show done tasks ▼\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), showDoneTasks && filteredTaskList.filter(task => {\n      return task.status === \"done\";\n    }).map(task => {\n      return /*#__PURE__*/_jsxDEV(Task, {\n        task: task,\n        tagList: tagList,\n        getUserTags: getUserTags,\n        refreshTaskNew: refreshTask,\n        refreshDeletedTaskNew: refreshDeletedTask\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Tasks, \"6ucD9kJ0pN60gUEJSnf0fCuDi/g=\");\n\n_c = Tasks;\nexport default Tasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"Tasks\");","map":{"version":3,"sources":["/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Tasks.js"],"names":["Task","useState","useEffect","Tasks","filteredTaskList","tagList","getUserTags","refreshTask","refreshDeletedTask","showDoneTasks","setShowDoneTasks","filter","task","status","map","id"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,QAAjB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;;AAEA,SAASC,KAAT,OAA4F;AAAA;;AAAA,MAA7E;AAAEC,IAAAA,gBAAF;AAAoBC,IAAAA,OAApB;AAA6BC,IAAAA,WAA7B;AAA0CC,IAAAA,WAA1C;AAAuDC,IAAAA;AAAvD,GAA6E;AAC1F,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,KAAD,CAAlD;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA,eACGG,gBAAgB,CACdO,MADF,CACUC,IAAD,IAAU;AAAC,aAAOA,IAAI,CAACC,MAAL,KAAgB,MAAvB;AAA8B,KADlD,EAEEC,GAFF,CAEMF,IAAI,IAAI;AACX,0BACE,QAAC,IAAD;AAEE,QAAA,IAAI,EAAEA,IAFR;AAGE,QAAA,OAAO,EAAEP,OAHX;AAIE,QAAA,WAAW,EAAEC,WAJf;AAKE,QAAA,cAAc,EAAEC,WALlB;AAME,QAAA,qBAAqB,EAAEC;AANzB,SACOI,IAAI,CAACG,EADZ;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAXF,CADH,eAcE;AAAQ,MAAA,OAAO,EAAE,MAAML,gBAAgB,CAAC,CAACD,aAAF,CAAvC;AAAA,gBACGA,aAAa,GAAG,mBAAH,GAAyB;AADzC;AAAA;AAAA;AAAA;AAAA,YAdF,EAiBGA,aAAa,IACZL,gBAAgB,CACfO,MADD,CACSC,IAAD,IAAU;AAAC,aAAOA,IAAI,CAACC,MAAL,KAAgB,MAAvB;AAA8B,KADjD,EAECC,GAFD,CAEKF,IAAI,IAAI;AACX,0BACE,QAAC,IAAD;AAEE,QAAA,IAAI,EAAEA,IAFR;AAGE,QAAA,OAAO,EAAEP,OAHX;AAIE,QAAA,WAAW,EAAEC,WAJf;AAKE,QAAA,cAAc,EAAEC,WALlB;AAME,QAAA,qBAAqB,EAAEC;AANzB,SACOI,IAAI,CAACG,EADZ;AAAA;AAAA;AAAA;AAAA,cADF;AAQD,KAXD,CAlBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkCD;;GArCQZ,K;;KAAAA,K;AAuCT,eAAeA,KAAf","sourcesContent":["import Task from './Task'\nimport { useState, useEffect } from 'react'\n\nfunction Tasks({ filteredTaskList, tagList, getUserTags, refreshTask, refreshDeletedTask }) {\n  const [showDoneTasks, setShowDoneTasks] = useState(false)\n\n  return (\n    <div className=\"Tasks\">\n      {filteredTaskList\n        .filter((task) => {return task.status !== \"done\"}) \n        .map(task => {\n          return (\n            <Task \n              key={task.id} \n              task={task} \n              tagList={tagList} \n              getUserTags={getUserTags}  \n              refreshTaskNew={refreshTask}\n              refreshDeletedTaskNew={refreshDeletedTask} />)\n        })\n      }\n      <button onClick={() => setShowDoneTasks(!showDoneTasks)}>\n        {showDoneTasks ? \"Hide done tasks ▲\" : \"Show done tasks ▼\"}\n      </button>\n      {showDoneTasks && \n        filteredTaskList\n        .filter((task) => {return task.status === \"done\"}) \n        .map(task => {\n          return (\n            <Task\n              key={task.id} \n              task={task} \n              tagList={tagList} \n              getUserTags={getUserTags}  \n              refreshTaskNew={refreshTask}\n              refreshDeletedTaskNew={refreshDeletedTask} />)\n        })\n      }\n    </div>\n  );\n}\n\nexport default Tasks"]},"metadata":{},"sourceType":"module"}