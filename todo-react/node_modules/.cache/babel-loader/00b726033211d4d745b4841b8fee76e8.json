{"ast":null,"code":"var _jsxFileName = \"/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Task.js\",\n    _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport TagTask from \"./TagTask\";\nimport Tag from \"./Tag\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Task(_ref) {\n  _s();\n\n  var _this = this;\n\n  let {\n    currentUserId,\n    index,\n    task,\n    setFilteredTaskList,\n    filteredTaskList,\n    setTaggedTaskList,\n    setTaskList,\n    tagList,\n    getUserTags,\n    refreshTaskNew,\n    refreshDeletedTask\n  } = _ref;\n  return function (refreshDeletedTask) {\n    const [showEditTask, setShowEditTask] = useState(false);\n    const [showTagTask, setShowTagTask] = useState(false);\n\n    function refreshTasklist() {\n      axios.get(`/api/${currentUserId}/tasks`).then(res => {\n        setTaskList(res.data);\n      }).catch(error => console.log(error));\n    }\n\n    function refreshDeletedTask() {\n      let newTaskList = [...filteredTaskList];\n      newTaskList.splice(index, 1);\n      setFilteredTaskList(newTaskList);\n      setTaggedTaskList(newTaskList);\n      refreshTasklist();\n      getUserTags();\n    }\n\n    function deleteTask() {\n      axios.delete(`/api/tasks/${task.id}`).then(res => {\n        refreshDeletedTask();\n      }).catch(error => console.log(error));\n    }\n\n    function toggleFlagTask() {\n      let newstatus = task.status == \"flagged\" ? null : 'flagged';\n      axios.put(`/api/tasks/${task.id}`, {\n        status: newstatus\n      }).then(res => {\n        refreshTaskNew(res.data);\n      }).catch(error => console.log(error));\n    }\n\n    function toggleDoneTask() {\n      let newstatus = task.status == \"done\" ? null : 'done';\n      axios.put(`/api/tasks/${task.id}`, {\n        status: newstatus\n      }).then(res => {\n        refreshTaskNew(res.data);\n      }).catch(error => console.log(error));\n    }\n\n    let className = \"Task\";\n\n    if (task.status == \"flagged\") {\n      className += \" Task-flagged\";\n    }\n\n    if (task.status == \"done\") {\n      className += \" Task-done\";\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"Title\",\n          children: [task.title, \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 10\n        }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"TagsBar\",\n          children: task.tags.map((tag, index) => {\n            return /*#__PURE__*/_jsxDEV(Tag, {\n              tag: tag,\n              task: task,\n              getUserTags: getUserTags,\n              refreshTaskNew: refreshTaskNew\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 15\n            }, _this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 10\n        }, _this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"AddTagToTask\",\n          onClick: () => setShowTagTask(!showTagTask),\n          children: showTagTask ? \"-\" : \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 10\n        }, _this), showTagTask && /*#__PURE__*/_jsxDEV(TagTask, {\n          task: task,\n          tagList: tagList,\n          getUserTags: getUserTags,\n          refreshTaskNew: refreshTaskNew\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"Deadline\",\n        children: [\"Deadline: \", task.deadline === null ? \"None\" : task.deadline]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: task.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"Buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleDoneTask,\n          children: task.status == 'done' ? 'Undo' : 'Done'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleFlagTask,\n          children: task.status == 'flagged' ? 'Unflag' : 'Flag'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowEditTask(!showEditTask),\n          children: showEditTask ? 'Close' : 'Edit'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: deleteTask,\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 9\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, _this), showEditTask && /*#__PURE__*/_jsxDEV(EditTask, {\n        task: task,\n        index: index,\n        setShowEditTask: setShowEditTask,\n        refreshTaskNew: refreshTaskNew,\n        getUserTags: getUserTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }, _this);\n  }(refreshDeletedTask);\n}\n\n_s(Task, \"E6O+kNljy8TJBkmOI/QdaoyKiZw=\");\n\n_c = Task;\nexport default Task;\n\nvar _c;\n\n$RefreshReg$(_c, \"Task\");","map":{"version":3,"sources":["/home/oaeiu/todo-app/cvwo-todo-app/todo-react/src/components/Task.js"],"names":["axios","useState","EditTask","TagTask","Tag","Task","currentUserId","index","task","setFilteredTaskList","filteredTaskList","setTaggedTaskList","setTaskList","tagList","getUserTags","refreshTaskNew","refreshDeletedTask","showEditTask","setShowEditTask","showTagTask","setShowTagTask","refreshTasklist","get","then","res","data","catch","error","console","log","newTaskList","splice","deleteTask","delete","id","toggleFlagTask","newstatus","status","put","toggleDoneTask","className","title","tags","map","tag","deadline","description"],"mappings":"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","sourcesContent":["import axios from \"axios\";\nimport { useState } from \"react\";\nimport EditTask from \"./EditTask\";\nimport TagTask from \"./TagTask\";\nimport Tag from \"./Tag\"\n\nfunction Task({ \n  currentUserId, index, task,  setFilteredTaskList, filteredTaskList, setTaggedTaskList, \n  setTaskList, tagList, getUserTags, refreshTaskNew, refreshDeletedTask}) {\n  const [showEditTask, setShowEditTask] = useState(false)\n  const [showTagTask, setShowTagTask] = useState(false)\n\n  function refreshTasklist() {\n    axios\n      .get(`/api/${currentUserId}/tasks`)\n      .then((res) => {\n        setTaskList(res.data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function refreshDeletedTask() {\n    let newTaskList = [...filteredTaskList]\n    newTaskList.splice(index, 1)\n    setFilteredTaskList(newTaskList)\n    setTaggedTaskList(newTaskList)\n    refreshTasklist()\n    getUserTags()\n  }\n\n  function deleteTask() {\n    axios\n      .delete(`/api/tasks/${task.id}`)\n      .then((res) => {\n        refreshDeletedTask()\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function toggleFlagTask() {\n    let newstatus = (task.status == \"flagged\")\n               ? null\n               : 'flagged'\n    axios\n      .put(`/api/tasks/${task.id}`, {status: newstatus})\n      .then((res) => {\n        refreshTaskNew(res.data)\n      })\n      .catch((error) => console.log(error))\n  }\n\n  function toggleDoneTask() {\n    let newstatus = (task.status == \"done\")\n               ? null\n               : 'done'\n    axios\n      .put(`/api/tasks/${task.id}`, {status: newstatus})\n      .then((res) => {\n        refreshTaskNew(res.data)\n      })\n      .catch((error) => console.log(error))    \n  }\n\n  let className=\"Task\"\n  if (task.status == \"flagged\") {\n    className += \" Task-flagged\"\n  }\n  if (task.status == \"done\") {\n    className += \" Task-done\"\n  }\n\n  return (\n    <div className={className}>\n      <div className=\"Header\">\n         <h3 className=\"Title\">{task.title} </h3>\n         <div className=\"TagsBar\">\n            {task.tags.map((tag, index) => {\n             return (\n              <Tag \n                key={index} \n                tag={tag} \n                task={task}\n                getUserTags={getUserTags}\n                refreshTaskNew={refreshTaskNew}/>)\n          })} \n         </div>\n         <h3 className=\"AddTagToTask\" onClick={() => setShowTagTask(!showTagTask)}>{showTagTask ? \"-\" : \"+\"}</h3>\n         {showTagTask && \n          <TagTask \n            task={task} \n            tagList={tagList} \n            getUserTags={getUserTags}\n            refreshTaskNew={refreshTaskNew} />}\n      </div>\n      <h4 className=\"Deadline\">Deadline: {task.deadline === null ? \"None\" : task.deadline}</h4>\n      <p>{task.description}</p>\n      <div className=\"Buttons\">\n        <button onClick = {toggleDoneTask}>\n          {task.status == 'done' ? 'Undo' : 'Done'}\n        </button>\n        <button onClick = {toggleFlagTask}>\n          {task.status == 'flagged' ? 'Unflag' : 'Flag'}\n        </button>\n        <button onClick = {() => setShowEditTask(!showEditTask)}>\n        {showEditTask ? 'Close' : 'Edit'}\n        </button>\n        <button onClick = {deleteTask}>\n        Delete\n        </button>\n      </div>\n      {showEditTask && \n        <EditTask \n          task={task} \n          index={index} \n          setShowEditTask={setShowEditTask} \n          refreshTaskNew={refreshTaskNew}\n          getUserTags={getUserTags} />}\n    </div>\n  );\n}\n\nexport default Task"]},"metadata":{},"sourceType":"module"}